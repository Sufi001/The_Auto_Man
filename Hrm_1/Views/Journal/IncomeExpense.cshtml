@model Inventory.ViewModels.Journal.JournalViewModel
@{
    ViewBag.Title = "Income & Expense";
}
<style>
    .callout, .card, .info-box, .mb-3, .my-3, .small-box {
        margin-bottom: 0.2rem !important;
    }

    .card-header {
        padding: .50rem 1.0rem;
        padding-top: 0.25rem;
        padding-right: 1.0rem;
        padding-bottom: 0.0rem;
        padding-left: 1.25rem;
    }

    select:focus, input:focus {
        outline: none !important;
        border-color: #719ECE !important;
        box-shadow: 0 0 5px #719ECE !important;
    }

    #list, #Sumbit, #New, #Print, #authorize {
        width: 90px;
        margin-left: 3px;
    }

    table thead tr th {
        color: white;
    }
</style>

<div class="content-wrapper">
    <div class="container-fluid">
        @Html.EditorFor(model => model.Doc_Seq, new { htmlAttributes = new { @type = "hidden", @class = "form-control", @id = "Doc_Seq" } })
        <div class="row was-validated" id="form">
            <div class="col-12">
                <!-- Custom Tabs -->
                <div class="card">
                    <div class="card-header d-flex p-0" style="background-color:#3498DB">
                        <h2 class="card-title p-3"><b style="color:white">Income & Expense</b></h2>
                        <ul class="nav nav-pills ml-auto p-2">
                            <li><button style="border:1px solid; background-color:#3985d2;color:white" type="button" id="New" class="btn  fa-pull-right" onclick="location.href='@Url.Action("IncomeExpense", "Journal", new { target="_blank" })'">New</button></li>
                            <li><button style="border:1px solid; background-color:#3985d2;color:white" type="button" id="list" class="btn  fa-pull-right" onclick="location.href='@Url.Action("List", "Journal", new { viewName="IncomeExpenseList" })'">Retrieve</button></li>
                            @if (Model.Status == Inventory.Constants.DocumentStatus.AuthorizedDocument)
                            {
                                <li><input style="border:1px solid; background-color:#3985d2;color:white" type="button" value="Save" disabled id="Sumbit" class="btn fa-pull-right" /></li>
                                <li><input style="border:1px solid; background-color:#3985d2;color:white" type="button" value="Authorize" disabled id="authorize" name="authorize" class="btn pull-right" onclick="Authorize()" /></li>
                            }
                            else
                            {
                                <li><input style="border:1px solid; background-color:#3985d2;color:white" type="button" value="Save" id="Sumbit" class="btn fa-pull-right" /></li>
                                <li><input style="border:1px solid; background-color:#3985d2;color:white" type="button" value="Authorize" id="authorize" name="authorize" class="btn pull-right" onclick="Authorize()" /></li>
                            }

                            <li><input style="border:1px solid; background-color:#3985d2;color:white" type="button" value="Print" id="Print" onclick="Report()" class="btn fa-pull-right" /></li>
                        </ul>
                    </div><!-- /.card-header -->
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.VoucherDate, new { htmlAttributes = new { @Value = Model.VoucherDate.Value.ToString("yyyy-MM-dd"), @class = "form-control ", @id = "VoucherDate", @required = "required", @placeholder = "Voucher Date", @type = "date" } })
                                    <label for="VoucherDate">Voucher Date</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(model => model.Doc_Type, new SelectList(Model.docTypeList, "value", "text"), null @*"Select Doc Type"*@, new { @class = "form-control", @id = "ddl_Doc_Type", @name = "ddl_Doc_Type", @required = "required ", @onchange = "ShowIE()" })
                                    <label for="ddl_Doc_Type">Doc Type</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(model => model.PaymentMode, new SelectList(Model.TransactionMode, "value", "text"), null @*"Select Payment Mode"*@, new { @class = "form-control", @id = "ddl_PaymentMode", @name = "ddl_PaymentMode", @required = "required ", @onchange = "ShowBankInfo()" })
                                    <label for="ddl_PaymentMode">Payment Mode</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.Balance, new { htmlAttributes = new { @class = "form-control ", @id = "Balance", @placeholder = "Balance", @type = "text", @disabled = "disabled" } })
                                    <label for="Balance">Balance</label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-6" id="income_div">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(m => m.AccountCodeIE, new SelectList(Model.AccountListIncome, "value", "text"), null, new { @class = "form-control", @id = "ddl_Income", @name = "ddl_Income"})
                                    <label for="ddl_Income">Income Account</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6" id="expense_div">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(m => m.AccountCodeIE, new SelectList(Model.AccountListExpense, "value", "text"), null, new { @class = "form-control", @id = "ddl_Expense", @name = "ddl_Expense"})
                                    <label for="ddl_Expense">Expense Account</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @id = "Amount", @required = "required", @placeholder = "Amount", @onchange = "GetAmountInWords()", @type = "number", autocomplete = "off" } })
                                    <label for="Amount">Amount</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(m => m.AccountCode, new SelectList(Model.AccountListCB, "value", "text"), null, new { @class = "form-control", @id = "ddl_Account", @name = "ddl_Account", @required = "required" })
                                    <label for="ddl_Account">Account</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.AmountInWords, new { htmlAttributes = new { @class = "form-control", @id = "AmountInWords", @placeholder = "Amount In Words", @type = "text", autocomplete = "off", @readonly = "readonly" } })
                                    <label for="AmountInWords">Amount In Words</label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.BookNo, new { htmlAttributes = new { @class = "form-control", @id = "BookNo", @placeholder = "Book No", @type = "text", autocomplete = "off" } })
                                    <label for="BookNo">Book No</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.BillNo, new { htmlAttributes = new { @class = "form-control", @id = "BillNo", @placeholder = "Bill No", @type = "text", autocomplete = "off" } })
                                    <label for="BillNo">Bill No</label>
                                </div>
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "form-control", @id = "Narration", @placeholder = "Narration", @type = "text", autocomplete = "off" } })
                                    <label for="Narration">Narration</label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-3 col-md-3 col-sm-6">
                                <div class="form-group has-float-label">
                                    @Html.DropDownListFor(m => m.StaffCode, new SelectList(Model.StaffList, "value", "text"), "Select Staff Member", new { @class = "form-control", @id = "ddl_STAFF", @name = "ddl_STAFF" })
                                    <label for="ddl_STAFF">Staff Member</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6" id="bankDiv" style = "display:none">
                                <div class="form-grou has-float-label">
                                    @Html.EditorFor(model => model.BankName, new { htmlAttributes = new {@class = "form-control", @id = "BankName", @placeholder = "Bank Name", @name = "BankName", @type = "text", autocomplete = "off" } })
                                    <label for="BankName">Bank Name</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6" id="chequeDiv" style = "display:none">
                                <div class="form-group has-float-label">
                                    @Html.EditorFor(model => model.ChequeNo, new{htmlAttributes = new{@class = "form-control",@id = "ChequeNo", @placeholder = "Cheque No", @type = "text", autocomplete = "off"}})
                                    <label for="ChequeNo">Cheque No</label>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6" id="bankDateDiv" style="display:none">
                                <div class="form-group has-float-label">
                                    @*@Html.EditorFor(model => model.Dated, new { htmlAttributes = new { @Value = Model.Dated.Value.ToString("dd/MM/yyyy"), @class = "form-control datetimepicker-input", @id = "Dated", @placeholder = "Dated", @type = "text", @data_toggle = "datetimepicker", @data_target = "#Dated" } })*@
                                    @Html.EditorFor(model => model.Dated, new { htmlAttributes = new { @Value = Model.Dated.Value.ToString("yyyy-MM-dd"), @class = "form-control", @id = "Dated", @placeholder = "Dated", @type = "text", onfocus = "(this.type='date')", autocomplete = "off" } })
                                    <label for="Dated">Dated</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-12 col-xs-12">
            <div class="modal fade" id="myReportModal" role="dialog">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <iframe name="DetailFrame" id="DetailFrame" src="about:blank" class="col-xs-12" style="height:600px"></iframe>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
@section scripts{
    <script src="~/AdminLte/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/AdminLte/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script>
        var authorize = false;
        $("#expense_div").hide();
        var UpdateMode = '@ViewBag.Update';
        if (UpdateMode != null && UpdateMode) {
            $('#ddl_Doc_Type').attr('disabled', 'disabled');
            ShowIE();
            ShowBankInfo();
        }
        //$("#ProductTable").DataTable();
        $("#Sumbit").click(function () {
            $('#ddl_Doc_Type').removeAttr('disabled', 'disabled');
            var doc_Seq = $('#Doc_Seq').val();
            var doc_Type = $('#ddl_Doc_Type').val();
            var narration = $('#Narration').val();
            var voucherDate = $('#VoucherDate').val();
            var amount = $('#Amount').val();
            var bankName = $('#BankName').val();
            var dated = $('#Dated').val();
            var amountInWords = $('#AmountInWords').val();
            var chequeNo = $('#ChequeNo').val();
            var paymentMode = $('#ddl_PaymentMode').val();
            var staffCode = $('#ddl_STAFF').val();
            var bookNo = $('#BookNo').val();
            var billNo = $('#BillNo').val();
            var accountCode = $('#ddl_Account').val();
            var accountTitle = $('#ddl_Account option:selected').text();
            var accountCodeI = $('#ddl_Income').val();
            var accountTitleI = $('#ddl_Income option:selected').text();
            var accountCodeE = $('#ddl_Expense').val();
            var accountTitleE = $('#ddl_Expense option:selected').text();

            var accountCodeIE = doc_Type == "I" ? accountCodeI : accountCodeE;
            var accountTitleIE = doc_Type == "I" ? accountTitleI : accountTitleE;

            if (VoucherDate == null || VoucherDate == "") {
                toastr.error("Select Voucher Date");
                return;
            }
            else if (Amount == null || Amount == "") {
                toastr.error("Enter Amount");
                return;
            }
            else if (doc_Type == "I" && (accountCodeI == null || accountCodeI == "")) {
                toastr.error("Select Income Account");
                return;
            }
            else if (doc_Type == "E" && (accountCodeE == null || accountCodeE == "")) {
                toastr.error("Select Expense Account");
                return;
            }
            //else if (staffCode == null || staffCode == "") {
            //    toastr.error("Select Staff");
            //    return;
            //}
            else if (paymentMode == null || paymentMode == "") {
                toastr.error("Select Payment Mode");
                return;
            }
            else if (accountCode == null || accountCode == "") {
                toastr.error("Select Cash/Bank Account");
                return;
            }
            else if ((paymentMode == "BR" || paymentMode == "BP") && (chequeNo == null || chequeNo == "")) {
                toastr.error("Enter Cheque Number");
                return;
            }
            else if (doc_Type == null || doc_Type == "") {
                toastr.error("Select Payment Document Type");
                return;
            }
            else {
                VM = {};
                VM.Doc_Seq = doc_Seq;
                VM.Doc_Type = doc_Type;
                VM.VoucherDate = voucherDate;
                VM.Amount = amount;
                VM.BankName = bankName;
                VM.Dated = dated;
                VM.AmountInWords = amountInWords;
                VM.ChequeNo = chequeNo;
                VM.PaymentMode = paymentMode;
                VM.Narration = narration;
                VM.AccountCode = accountCode;
                VM.AccountTitle = accountTitle;
                VM.AccountCodeIE = accountCodeIE;
                VM.AccountTitleIE = accountTitleIE;
                VM.BookNo = bookNo;
                VM.BillNo = billNo;
                var URL = "";
                if (authorize) {
                    URL = "/Journal/Authorize";
                }
                else {
                    URL = "/Journal/Save";
                }
                $.ajax({
                    url: URL,
                    method: "post",
                    data: VM
                }).done(function (obj) {
                    //if (obj == "OK") {
                    //    setTimeout(function () { window.location.href = "/Journal/Index"; }, 1500);
                    //}
                    if (obj == "Ex") {
                        toastr.error('Invalid Query');
                    }
                    else {
                        toastr.success('Data Save Successfully');
                        $('#Doc_Seq').val(obj);
                        if (authorize) {
                            $('#authorize').attr('disabled', 'disabled');
                            $('#Sumbit').attr('disabled', 'disabled');
                        }
                    }
                    $('#ddl_Doc_Type').attr('disabled', 'disabled');
                }).fail(function () {
                    toastr.error('Data not saved.');
                });
            }
        });
        function Report() {
            var doc_Seq = $('#Doc_Seq').val();
            if (doc_Seq != "" || doc_Seq != null) {
                var DetailUrl = "/Reports/RnP?Doc_No=" + doc_Seq;
                $('#DetailFrame').attr('src', DetailUrl);
                $("#myReportModal").modal();
            }
        }
        function GetAmountInWords() {
            var amount = $('#Amount').val();
            if (amount != null && amount != "") {
                $.ajax({
                    url: "/Journal/AmountInWords/?amount=" + amount,
                    method: "get",
                }).done(function (obj) {
                    if (obj == "Ex") {
                        toastr.error('Conversion Failed');
                    }
                    else {
                        $('#AmountInWords').val(obj);
                    }
                }).fail(function () {
                    toastr.error('Conversion Call Fail');
                });
            }

        }
        function Authorize() {
            authorize = true;
            $("#Sumbit").click();
            //$('#ddl_Doc_Type').removeAttr('disabled', 'disabled');
            //var doc_Seq = $('#Doc_Seq').val();
            //var doc_Type = $('#ddl_Doc_Type').val();
            //var narration = $('#Narration').val();
            //var voucherDate = $('#VoucherDate').val();
            //var amount = $('#Amount').val();
            //var bankName = $('#BankName').val();
            //var dated = $('#Dated').val();
            //var amountInWords = $('#AmountInWords').val();
            //var chequeNo = $('#ChequeNo').val();
            //var paymentMode = $('#ddl_PaymentMode').val();
            //var staffCode = $('#ddl_STAFF').val();
            //var bookNo = $('#BookNo').val();
            //var billNo = $('#BillNo').val();

            //var accountCode = $('#ddl_Account').val();
            //var accountTitle = $('#ddl_Account option:selected').text();
            //var accountCodeI = $('#ddl_Income').val();
            //var accountTitleI = $('#ddl_Income option:selected').text();
            //var accountCodeE = $('#ddl_Expense').val();
            //var accountTitleE = $('#ddl_Expense option:selected').text();

            //var accountCodeIE = doc_Type == "I" ? accountCodeI : accountCodeE;
            //var accountTitleIE = doc_Type == "I" ? accountTitleI : accountTitleE;

            //if (VoucherDate == null || VoucherDate == "") {
            //    toastr.error("Select Voucher Date");
            //    return;
            //}
            //else if (Amount == null || Amount == "") {
            //    toastr.error("Enter Amount");
            //    return;
            //}
            //else if (doc_Type == "I" && (accountCodeI == null || accountCodeI == "")) {
            //    toastr.error("Select Income Account");
            //    return;
            //}
            //else if (doc_Type == "E" && (accountCodeE == null || accountCodeE == "")) {
            //    toastr.error("Select Expense Account");
            //    return;
            //}
            //else if (staffCode == null || staffCode == "") {
            //    toastr.error("Select Staff");
            //    return;
            //}
            //else if (paymentMode == null || paymentMode == "") {
            //    toastr.error("Select Payment Mode");
            //    return;
            //}
            //else if (accountCode == null || accountCode == "") {
            //    toastr.error("Select Cash/Bank Account");
            //    return;
            //}
            //else if ((paymentMode == "BR" || paymentMode == "BP") && (chequeNo == null || chequeNo == "")) {
            //    toastr.error("Enter Cheque Number");
            //    return;
            //}
            //else if (doc_Type == null || doc_Type == "") {
            //    toastr.error("Select Payment Document Type");
            //    return;
            //}
            //else {
            //    VM = {};
            //    VM.Doc_Seq = doc_Seq;
            //    VM.Doc_Type = doc_Type;
            //    VM.VoucherDate = voucherDate;
            //    VM.Amount = amount;
            //    VM.BankName = bankName;
            //    VM.Dated = dated;
            //    VM.AmountInWords = amountInWords;
            //    VM.ChequeNo = chequeNo;
            //    VM.PaymentMode = paymentMode;
            //    VM.Narration = narration;
            //    VM.AccountCode = accountCode;
            //    VM.AccountTitle = accountTitle;
            //    VM.AccountCodeIE = accountCodeIE;
            //    VM.AccountTitleIE = accountTitleIE;
            //    VM.BookNo = bookNo;
            //    VM.BillNo = billNo;
            //    VM.Party_Type = partyType;
            //    VM.STATUS = "3"

            //    $.ajax({
            //        url: "/Journal/Save",
            //        method: "post",
            //        data: VM
            //    }).done(function (obj) {
            //        if (obj == "Ex") {
            //            toastr.error('Invalid Query');
            //        }
            //        else {
            //            toastr.success('Data Save Successfully');
            //            $('#Doc_Seq').val(obj);
            //        }
            //        $('#ddl_Doc_Type').attr('disabled', 'disabled');
            //        $('#authorize').attr('disabled', 'disabled');
            //        $('#Sumbit').attr('disabled', 'disabled');

            //    }).fail(function () {
            //        toastr.error('Data not saved.');
            //    });
            //}
        }
        function ShowIE() {
            var pType = $("#ddl_Doc_Type").val();
            if (pType == "I") {
                $("#income_div").show();
                $("#expense_div").hide();
            }
            else {
                $("#income_div").hide();
                $("#expense_div").show();
            }
        }
        function GetAccounts(str) {

            $('#ddl_Account').empty();
            $.ajax({
                url: "/Journal/GetAccount/?id=" + str,
                type: "GET",
            }).done(function (obj) {
                if (obj == "Parameter Can't Be Null or Empty") {
                    toastr.error("Parameter Can't Be Null or Empty");
                }
                else if (obj == "") {
                    toastr.error("No Account Found");
                }
                else {
                    $.each(obj, function (index, element) {
                        $('#ddl_Account').append(new Option(obj[index].Text, obj[index].Value));
                    });
                }

            }).fail(function (ex) {
                toastr.error('Balance Inquiry Fail');
            });

        }
        function ShowBankInfo() {
            var paymentMode = $("#ddl_PaymentMode").val();
            //Don't get account heads automatically in edit mode at page load
            if (!UpdateMode) {
                GetAccounts(paymentMode);
            }
            UpdateMode = false;  // update mode turn to false so account could load on mode chane after page load
            if (paymentMode == "BR" || paymentMode == "BP") {
                $("#bankDiv").show()
                $("#chequeDiv").show()
                $("#bankDateDiv").show()
            }
            else {
                $("#bankDiv").hide()
                $("#chequeDiv").hide()
                $("#bankDateDiv").hide()
            }
        }
        function ShowTransactionMode() {
            var pType = $("#ddl_Doc_Type").val();
            $('#ddl_PaymentMode').empty();
            if (pType == "I") {
                //receipt
                $('#ddl_PaymentMode').append(new Option("CR-Cash Receipt Voucher", "CR"));
                $('#ddl_PaymentMode').append(new Option("BR-Bank Receipt Voucher", "BR"));
            }
            else {
                //Payment
                $('#ddl_PaymentMode').append(new Option("CP-Cash Payment Voucher", "CP"));
                $('#ddl_PaymentMode').append(new Option("BP-Bank Payment Voucher", "BP"));
            }
        }
    </script>
}